{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Tkinter Layout Helpers","text":"<p>A library which is intended to simplify a placement of widgets with <code>.grid()</code> and <code>.pack()</code> methods:</p> <ul> <li>avoid manual passing a parent container when creating a widget;</li> <li>avoid manual calculation of indices of columns and rows when you add a widget;</li> <li>avoid typing-in some common parameters (like <code>sticky=tk.EW</code>) each time you add a widget;</li> <li>and more...</li> </ul> <p>Work in progress.</p> <p>As an example, this code:</p> <pre><code>import tkinter as tk\nfrom tkinter_layout_helpers.grid_helper import grid_manager\n\nroot = tk.Tk()\n\nwith grid_manager(root, sticky=tk.EW) as grid:\n    with grid.new_row() as row:\n        row.add(tk.Label(text=\"0\", width=20))\n        row.add(tk.Label(text=\"1\", width=20))\n        row.add(tk.Label(text=\"2\", width=20))\n        row.add(tk.Label(text=\"3\", width=20))\n        row.add(tk.Label(text=\"4\", width=20))\n\n    with grid.new_row() as row:\n        row.add(tk.Entry()).set_column_span(4)\n        row.add(tk.Entry()).set_column_span(1)\n\n    with grid.new_row() as row:\n        row.add(tk.Entry()).set_column_span(3)\n        row.add(tk.Entry()).set_column_span(2)\n\n    with grid.new_row() as row:\n        row.add(tk.Entry()).set_column_span(2)\n        row.add(tk.Entry()).set_column_span(3)\n\n    with grid.new_row() as row:\n        row.add(tk.Entry()).set_column_span(1)\n        row.add(tk.Entry()).set_column_span(4)\n\n    for column in grid.columns:\n        column.configure(weight=1)\n\nroot.mainloop()\n</code></pre> <p>Gives the following result:</p> <p></p> <p>Example for the <code>pack_manager</code>:</p> <pre><code>import tkinter as tk\n\nfrom tkinter_layout_helpers import pack_manager\n\nroot = tk.Tk()\n\nwith pack_manager(root, fill=tk.BOTH) as packer:\n    packer.pack_left(tk.Label(text=\"Left bar\", relief=tk.RAISED))\n    packer.pack_top(tk.Label(text=\"Top bar\", relief=tk.RAISED))\n    packer.pack_bottom(tk.Label(text=\"Bottom bar\", relief=tk.RAISED))\n    packer.pack_right(tk.Label(text=\"Right bar\", relief=tk.RAISED))\n    packer.pack_expanded(tk.Text())\n\nroot.mainloop()\n</code></pre> <p>Result:</p> <p></p> <p>More examples see here: examples</p>"},{"location":"internal_api_grid_helper.html","title":"Grid Helper","text":""},{"location":"internal_api_grid_helper.html#tkinter_layout_helpers.grid_helper.Cell","title":"<code>Cell</code>  <code>dataclass</code>","text":"<p>Cell contains configuration for placing a widget in a grid, which will be passed to the <code>.grid()</code> method.</p> Source code in <code>tkinter_layout_helpers/grid_helper.py</code> <pre><code>@dataclass\nclass Cell:\n    \"\"\"Cell contains configuration for placing a widget in a grid, which will be passed to the `.grid()` method.\"\"\"\n\n    widget: tk.Widget\n    row: Row\n    column_index: int\n    row_index: int\n    options: dict[str, Any] = field(default_factory=dict)\n    column_span: int = field(default=1, init=False)\n    row_span: int = field(default=1, init=False)\n\n    def set_column_span(self, span: int) -&gt; Self:\n        \"\"\"\n        Set the number of columns to span for the widget in the cell.\n\n        Args:\n            span: number of columns to span\n\n        \"\"\"\n        self.column_span = span\n        return self\n\n    def set_row_span(self, span: int) -&gt; Self:\n        \"\"\"\n        Set the number of rows to span for the widget in the cell.\n\n        Args:\n            span: number of rows to span\n\n        \"\"\"\n        self.row_span = span\n        return self\n</code></pre>"},{"location":"internal_api_grid_helper.html#tkinter_layout_helpers.grid_helper.Cell.set_column_span","title":"<code>set_column_span(span)</code>","text":"<p>Set the number of columns to span for the widget in the cell.</p> <p>Parameters:</p> Name Type Description Default <code>span</code> <code>int</code> <p>number of columns to span</p> required Source code in <code>tkinter_layout_helpers/grid_helper.py</code> <pre><code>def set_column_span(self, span: int) -&gt; Self:\n    \"\"\"\n    Set the number of columns to span for the widget in the cell.\n\n    Args:\n        span: number of columns to span\n\n    \"\"\"\n    self.column_span = span\n    return self\n</code></pre>"},{"location":"internal_api_grid_helper.html#tkinter_layout_helpers.grid_helper.Cell.set_row_span","title":"<code>set_row_span(span)</code>","text":"<p>Set the number of rows to span for the widget in the cell.</p> <p>Parameters:</p> Name Type Description Default <code>span</code> <code>int</code> <p>number of rows to span</p> required Source code in <code>tkinter_layout_helpers/grid_helper.py</code> <pre><code>def set_row_span(self, span: int) -&gt; Self:\n    \"\"\"\n    Set the number of rows to span for the widget in the cell.\n\n    Args:\n        span: number of rows to span\n\n    \"\"\"\n    self.row_span = span\n    return self\n</code></pre>"},{"location":"internal_api_grid_helper.html#tkinter_layout_helpers.grid_helper.Column","title":"<code>Column</code>","text":"<p>Virtual column object of a grid to configure \"real\" columns in the grid.</p> Source code in <code>tkinter_layout_helpers/grid_helper.py</code> <pre><code>class Column:\n    \"\"\"Virtual column object of a grid to configure \"real\" columns in the grid.\"\"\"\n\n    def __init__(self, grid: Grid, index: int) -&gt; None:\n        \"\"\"Initialize a column object.\"\"\"\n        self.grid = grid\n        self.index = index\n\n    def configure(self, *args, **kwargs) -&gt; None:\n        \"\"\"Configure the column of a grid. See `.grid_columnconfigure()` documentation of tkinter for details.\"\"\"\n        self.grid.parent.grid_columnconfigure(self.index, *args, **kwargs)\n</code></pre>"},{"location":"internal_api_grid_helper.html#tkinter_layout_helpers.grid_helper.Column.__init__","title":"<code>__init__(grid, index)</code>","text":"<p>Initialize a column object.</p> Source code in <code>tkinter_layout_helpers/grid_helper.py</code> <pre><code>def __init__(self, grid: Grid, index: int) -&gt; None:\n    \"\"\"Initialize a column object.\"\"\"\n    self.grid = grid\n    self.index = index\n</code></pre>"},{"location":"internal_api_grid_helper.html#tkinter_layout_helpers.grid_helper.Column.configure","title":"<code>configure(*args, **kwargs)</code>","text":"<p>Configure the column of a grid. See <code>.grid_columnconfigure()</code> documentation of tkinter for details.</p> Source code in <code>tkinter_layout_helpers/grid_helper.py</code> <pre><code>def configure(self, *args, **kwargs) -&gt; None:\n    \"\"\"Configure the column of a grid. See `.grid_columnconfigure()` documentation of tkinter for details.\"\"\"\n    self.grid.parent.grid_columnconfigure(self.index, *args, **kwargs)\n</code></pre>"},{"location":"internal_api_grid_helper.html#tkinter_layout_helpers.grid_helper.Columns","title":"<code>Columns</code>","text":"<p>Proxy object to configure columns of a grid.</p> Source code in <code>tkinter_layout_helpers/grid_helper.py</code> <pre><code>class Columns:\n    \"\"\"Proxy object to configure columns of a grid.\"\"\"\n\n    __len: int\n\n    def __init__(self, grid: Grid) -&gt; None:\n        \"\"\"Initialize a columns object.\"\"\"\n        self.grid = grid\n        self.__len = self._get_max_column()\n\n    def _get_max_column(self) -&gt; int:\n        \"\"\"Calculate max count of columns in all rows in the grid.\"\"\"\n        if not self.grid.rows:\n            return 0\n\n        return max(row.cells[-1].column_index + row.cells[-1].column_span for row in self.grid.rows)\n\n    def __getitem__(self, index: int) -&gt; Column:\n        \"\"\"Get a column object by index.\"\"\"\n        if not (0 &lt;= index &lt; self.__len):\n            msg = f\"Index {index} is out of range. Max index is {self.__len - 1}\"\n            raise IndexError(\n                msg,\n            )\n\n        return Column(self.grid, index)\n\n    def __len__(self) -&gt; int:\n        \"\"\"Get count of columns in the grid.\"\"\"\n        return self.__len\n</code></pre>"},{"location":"internal_api_grid_helper.html#tkinter_layout_helpers.grid_helper.Columns.__getitem__","title":"<code>__getitem__(index)</code>","text":"<p>Get a column object by index.</p> Source code in <code>tkinter_layout_helpers/grid_helper.py</code> <pre><code>def __getitem__(self, index: int) -&gt; Column:\n    \"\"\"Get a column object by index.\"\"\"\n    if not (0 &lt;= index &lt; self.__len):\n        msg = f\"Index {index} is out of range. Max index is {self.__len - 1}\"\n        raise IndexError(\n            msg,\n        )\n\n    return Column(self.grid, index)\n</code></pre>"},{"location":"internal_api_grid_helper.html#tkinter_layout_helpers.grid_helper.Columns.__init__","title":"<code>__init__(grid)</code>","text":"<p>Initialize a columns object.</p> Source code in <code>tkinter_layout_helpers/grid_helper.py</code> <pre><code>def __init__(self, grid: Grid) -&gt; None:\n    \"\"\"Initialize a columns object.\"\"\"\n    self.grid = grid\n    self.__len = self._get_max_column()\n</code></pre>"},{"location":"internal_api_grid_helper.html#tkinter_layout_helpers.grid_helper.Columns.__len__","title":"<code>__len__()</code>","text":"<p>Get count of columns in the grid.</p> Source code in <code>tkinter_layout_helpers/grid_helper.py</code> <pre><code>def __len__(self) -&gt; int:\n    \"\"\"Get count of columns in the grid.\"\"\"\n    return self.__len\n</code></pre>"},{"location":"internal_api_grid_helper.html#tkinter_layout_helpers.grid_helper.Grid","title":"<code>Grid</code>","text":"<p>               Bases: <code>Generic[TParent]</code></p> <p>Builder class to create a grid of widgets.</p> Source code in <code>tkinter_layout_helpers/grid_helper.py</code> <pre><code>class Grid(Generic[TParent]):\n    \"\"\"Builder class to create a grid of widgets.\"\"\"\n\n    parent: TParent\n    rows: list[Row]\n    row_index: int\n    kwargs: dict[str, Any]\n\n    def __init__(self, parent: TParent, **kwargs) -&gt; None:\n        \"\"\"\n        Initialize Grid object.\n\n        Args:\n            parent: parent widget\n            kwargs: common parameters to configure the widgets of a grid.\n                Common parameters have lower priority than parameters set by `add()`.\n\n        \"\"\"\n        self.parent = parent\n        self.rows = []\n        self.row_index = 0\n        self.kwargs = kwargs\n\n    def new_row(self) -&gt; Row:\n        \"\"\"Create a new row of a grid.\"\"\"\n        row = Row(self, self.row_index)\n        self.rows.append(row)\n        self.row_index += 1\n        return row\n\n    def columnconfigure(self, i: int, *args, **kwargs) -&gt; None:\n        \"\"\"\n        Configure the column of a grid. See `.grid_columnconfigure()` documentation of tkinter for details.\n\n        Args:\n            i: column index\n            args: additional parameters to configure the column\n            kwargs: additional parameters to configure the column\n\n        \"\"\"\n        self.parent.grid_columnconfigure(i, *args, **kwargs)\n\n    @property\n    def columns(self) -&gt; Columns:\n        \"\"\"Get a proxy object to configure the columns of a grid.\"\"\"\n        return Columns(self)\n\n    def rowconfigure(self, i: int, *args, **kwargs) -&gt; None:\n        \"\"\"Configure the row of a grid. See `.grid_rowconfigure()` documentation of tkinter for details.\"\"\"\n        self.parent.grid_rowconfigure(i, *args, **kwargs)\n\n    def build(self) -&gt; None:\n        \"\"\"Build a grid. Call this method after all widgets have been added to the grid.\"\"\"\n        for row in self.rows:\n            for cell in row.cells:\n                # Common kwargs have the lowest priority\n                kwargs = self.kwargs.copy()\n                # Then go parameters set by coll_span() and row_span()\n                kwargs.update(\n                    dict(\n                        column=cell.column_index,\n                        row=cell.row_index,\n                        columnspan=cell.column_span,\n                        rowspan=cell.row_span,\n                    ),\n                )\n                # Parameters of add() override all the previous parameters\n                kwargs.update(cell.options)\n                cell.widget.grid(**kwargs)\n</code></pre>"},{"location":"internal_api_grid_helper.html#tkinter_layout_helpers.grid_helper.Grid.columns","title":"<code>columns</code>  <code>property</code>","text":"<p>Get a proxy object to configure the columns of a grid.</p>"},{"location":"internal_api_grid_helper.html#tkinter_layout_helpers.grid_helper.Grid.__init__","title":"<code>__init__(parent, **kwargs)</code>","text":"<p>Initialize Grid object.</p> <p>Parameters:</p> Name Type Description Default <code>parent</code> <code>TParent</code> <p>parent widget</p> required <code>kwargs</code> <p>common parameters to configure the widgets of a grid. Common parameters have lower priority than parameters set by <code>add()</code>.</p> <code>{}</code> Source code in <code>tkinter_layout_helpers/grid_helper.py</code> <pre><code>def __init__(self, parent: TParent, **kwargs) -&gt; None:\n    \"\"\"\n    Initialize Grid object.\n\n    Args:\n        parent: parent widget\n        kwargs: common parameters to configure the widgets of a grid.\n            Common parameters have lower priority than parameters set by `add()`.\n\n    \"\"\"\n    self.parent = parent\n    self.rows = []\n    self.row_index = 0\n    self.kwargs = kwargs\n</code></pre>"},{"location":"internal_api_grid_helper.html#tkinter_layout_helpers.grid_helper.Grid.build","title":"<code>build()</code>","text":"<p>Build a grid. Call this method after all widgets have been added to the grid.</p> Source code in <code>tkinter_layout_helpers/grid_helper.py</code> <pre><code>def build(self) -&gt; None:\n    \"\"\"Build a grid. Call this method after all widgets have been added to the grid.\"\"\"\n    for row in self.rows:\n        for cell in row.cells:\n            # Common kwargs have the lowest priority\n            kwargs = self.kwargs.copy()\n            # Then go parameters set by coll_span() and row_span()\n            kwargs.update(\n                dict(\n                    column=cell.column_index,\n                    row=cell.row_index,\n                    columnspan=cell.column_span,\n                    rowspan=cell.row_span,\n                ),\n            )\n            # Parameters of add() override all the previous parameters\n            kwargs.update(cell.options)\n            cell.widget.grid(**kwargs)\n</code></pre>"},{"location":"internal_api_grid_helper.html#tkinter_layout_helpers.grid_helper.Grid.columnconfigure","title":"<code>columnconfigure(i, *args, **kwargs)</code>","text":"<p>Configure the column of a grid. See <code>.grid_columnconfigure()</code> documentation of tkinter for details.</p> <p>Parameters:</p> Name Type Description Default <code>i</code> <code>int</code> <p>column index</p> required <code>args</code> <p>additional parameters to configure the column</p> <code>()</code> <code>kwargs</code> <p>additional parameters to configure the column</p> <code>{}</code> Source code in <code>tkinter_layout_helpers/grid_helper.py</code> <pre><code>def columnconfigure(self, i: int, *args, **kwargs) -&gt; None:\n    \"\"\"\n    Configure the column of a grid. See `.grid_columnconfigure()` documentation of tkinter for details.\n\n    Args:\n        i: column index\n        args: additional parameters to configure the column\n        kwargs: additional parameters to configure the column\n\n    \"\"\"\n    self.parent.grid_columnconfigure(i, *args, **kwargs)\n</code></pre>"},{"location":"internal_api_grid_helper.html#tkinter_layout_helpers.grid_helper.Grid.new_row","title":"<code>new_row()</code>","text":"<p>Create a new row of a grid.</p> Source code in <code>tkinter_layout_helpers/grid_helper.py</code> <pre><code>def new_row(self) -&gt; Row:\n    \"\"\"Create a new row of a grid.\"\"\"\n    row = Row(self, self.row_index)\n    self.rows.append(row)\n    self.row_index += 1\n    return row\n</code></pre>"},{"location":"internal_api_grid_helper.html#tkinter_layout_helpers.grid_helper.Grid.rowconfigure","title":"<code>rowconfigure(i, *args, **kwargs)</code>","text":"<p>Configure the row of a grid. See <code>.grid_rowconfigure()</code> documentation of tkinter for details.</p> Source code in <code>tkinter_layout_helpers/grid_helper.py</code> <pre><code>def rowconfigure(self, i: int, *args, **kwargs) -&gt; None:\n    \"\"\"Configure the row of a grid. See `.grid_rowconfigure()` documentation of tkinter for details.\"\"\"\n    self.parent.grid_rowconfigure(i, *args, **kwargs)\n</code></pre>"},{"location":"internal_api_grid_helper.html#tkinter_layout_helpers.grid_helper.Row","title":"<code>Row</code>  <code>dataclass</code>","text":"<p>               Bases: <code>AbstractContextManager</code></p> <p>Row contains a list of cells, which will be passed to the <code>.grid()</code> method.</p> Source code in <code>tkinter_layout_helpers/grid_helper.py</code> <pre><code>@dataclass\nclass Row(contextlib.AbstractContextManager):\n    \"\"\"Row contains a list of cells, which will be passed to the `.grid()` method.\"\"\"\n\n    grid: Grid\n    row_index: int\n    column_index: int = field(default=0, init=False)\n    cells: list[Cell] = field(default_factory=list, init=False)\n\n    def __enter__(self) -&gt; Self:\n        \"\"\"Enter a context manager to add widgets to a row of a grid.\"\"\"\n        return self\n\n    def __exit__(self, exc_type, exc_value, traceback) -&gt; None:  # noqa: ANN001\n        \"\"\"Empty `__exit__` method to satisfy the context manager protocol.\"\"\"\n\n    def skip(self, count: int) -&gt; Self:\n        \"\"\"\n        Skip a number of cells in a row of a grid.\n\n        Args:\n            count: number of columns to skip\n\n        \"\"\"\n        self.column_index += count\n        return self\n\n    def add(self, widget: tk.Widget, **kwargs) -&gt; Cell:\n        \"\"\"\n        Add a widget to a row of a grid.\n\n        Args:\n            widget: widget to add\n            kwargs: all additional parameters to configure the widget's position in the cell\n\n        \"\"\"\n        if self.cells:\n            self.column_index += self.cells[-1].column_span\n\n        cell = Cell(\n            widget,\n            self,\n            self.column_index,\n            self.row_index,\n            options=kwargs,\n        )\n        self.cells.append(cell)\n\n        return cell\n\n    def configure(self, *args, **kwargs) -&gt; None:\n        \"\"\"\n        Configure the row of a grid. See `.grid_rowconfigure()` documentation of tkinter for details.\n\n        Args:\n            args: additional parameters to configure the row\n            kwargs: additional parameters to configure the row\n\n        \"\"\"\n        self.grid.parent.grid_rowconfigure(self.row_index, *args, **kwargs)\n</code></pre>"},{"location":"internal_api_grid_helper.html#tkinter_layout_helpers.grid_helper.Row.__enter__","title":"<code>__enter__()</code>","text":"<p>Enter a context manager to add widgets to a row of a grid.</p> Source code in <code>tkinter_layout_helpers/grid_helper.py</code> <pre><code>def __enter__(self) -&gt; Self:\n    \"\"\"Enter a context manager to add widgets to a row of a grid.\"\"\"\n    return self\n</code></pre>"},{"location":"internal_api_grid_helper.html#tkinter_layout_helpers.grid_helper.Row.__exit__","title":"<code>__exit__(exc_type, exc_value, traceback)</code>","text":"<p>Empty <code>__exit__</code> method to satisfy the context manager protocol.</p> Source code in <code>tkinter_layout_helpers/grid_helper.py</code> <pre><code>def __exit__(self, exc_type, exc_value, traceback) -&gt; None:  # noqa: ANN001\n    \"\"\"Empty `__exit__` method to satisfy the context manager protocol.\"\"\"\n</code></pre>"},{"location":"internal_api_grid_helper.html#tkinter_layout_helpers.grid_helper.Row.add","title":"<code>add(widget, **kwargs)</code>","text":"<p>Add a widget to a row of a grid.</p> <p>Parameters:</p> Name Type Description Default <code>widget</code> <code>Widget</code> <p>widget to add</p> required <code>kwargs</code> <p>all additional parameters to configure the widget's position in the cell</p> <code>{}</code> Source code in <code>tkinter_layout_helpers/grid_helper.py</code> <pre><code>def add(self, widget: tk.Widget, **kwargs) -&gt; Cell:\n    \"\"\"\n    Add a widget to a row of a grid.\n\n    Args:\n        widget: widget to add\n        kwargs: all additional parameters to configure the widget's position in the cell\n\n    \"\"\"\n    if self.cells:\n        self.column_index += self.cells[-1].column_span\n\n    cell = Cell(\n        widget,\n        self,\n        self.column_index,\n        self.row_index,\n        options=kwargs,\n    )\n    self.cells.append(cell)\n\n    return cell\n</code></pre>"},{"location":"internal_api_grid_helper.html#tkinter_layout_helpers.grid_helper.Row.configure","title":"<code>configure(*args, **kwargs)</code>","text":"<p>Configure the row of a grid. See <code>.grid_rowconfigure()</code> documentation of tkinter for details.</p> <p>Parameters:</p> Name Type Description Default <code>args</code> <p>additional parameters to configure the row</p> <code>()</code> <code>kwargs</code> <p>additional parameters to configure the row</p> <code>{}</code> Source code in <code>tkinter_layout_helpers/grid_helper.py</code> <pre><code>def configure(self, *args, **kwargs) -&gt; None:\n    \"\"\"\n    Configure the row of a grid. See `.grid_rowconfigure()` documentation of tkinter for details.\n\n    Args:\n        args: additional parameters to configure the row\n        kwargs: additional parameters to configure the row\n\n    \"\"\"\n    self.grid.parent.grid_rowconfigure(self.row_index, *args, **kwargs)\n</code></pre>"},{"location":"internal_api_grid_helper.html#tkinter_layout_helpers.grid_helper.Row.skip","title":"<code>skip(count)</code>","text":"<p>Skip a number of cells in a row of a grid.</p> <p>Parameters:</p> Name Type Description Default <code>count</code> <code>int</code> <p>number of columns to skip</p> required Source code in <code>tkinter_layout_helpers/grid_helper.py</code> <pre><code>def skip(self, count: int) -&gt; Self:\n    \"\"\"\n    Skip a number of cells in a row of a grid.\n\n    Args:\n        count: number of columns to skip\n\n    \"\"\"\n    self.column_index += count\n    return self\n</code></pre>"},{"location":"internal_api_grid_helper.html#tkinter_layout_helpers.grid_helper.grid_manager","title":"<code>grid_manager(parent, **kwargs)</code>","text":"<p>A context manager to create a grid of widgets. It is intended to simplify a placement of widgets with <code>.grid()</code>.</p> <p>Basicly, it is a wrapper around <code>Grid</code> class, but additionaly, it sets the parent widget of a grid (within the <code>with</code> statement scope), so you don't need to specify it explicitly for every widget.</p> <p>Usage example:</p> <pre><code>with grid_manager(root, sticky=tk.EW) as grid:\n    with grid.new_row() as row:\n        row.add(tk.Label(text=\"0\", width=20))\n        row.add(tk.Label(text=\"1\", width=20))\n        row.add(tk.Label(text=\"2\", width=20))\n        row.add(tk.Label(text=\"3\", width=20))\n        row.add(tk.Label(text=\"4\", width=20))\n</code></pre> Source code in <code>tkinter_layout_helpers/grid_helper.py</code> <pre><code>@contextlib.contextmanager\ndef grid_manager(parent: TParent, **kwargs) -&gt; Generator[Grid, None, None]:\n    \"\"\"\n    A context manager to create a grid of widgets. It is intended to simplify a placement of widgets with `.grid()`.\n\n    Basicly, it is a wrapper around `Grid` class, but additionaly, it sets the parent widget of a grid\n    (within the `with` statement scope), so you don't need to specify it explicitly for every widget.\n\n    Usage example:\n\n    ```python\n    with grid_manager(root, sticky=tk.EW) as grid:\n        with grid.new_row() as row:\n            row.add(tk.Label(text=\"0\", width=20))\n            row.add(tk.Label(text=\"1\", width=20))\n            row.add(tk.Label(text=\"2\", width=20))\n            row.add(tk.Label(text=\"3\", width=20))\n            row.add(tk.Label(text=\"4\", width=20))\n    ```\n    \"\"\"\n    with set_parent(parent):\n        grid = Grid(parent, **kwargs)\n        yield grid\n        grid.build()\n</code></pre>"},{"location":"internal_api_pack_helper.html","title":"Pack Helper","text":""},{"location":"internal_api_pack_helper.html#tkinter_layout_helpers.pack_helper.Packer","title":"<code>Packer</code>","text":"<p>               Bases: <code>Generic[TParent]</code></p> <p>Builder class to pack widgets in a window or a frame.</p> Source code in <code>tkinter_layout_helpers/pack_helper.py</code> <pre><code>class Packer(Generic[TParent]):\n    \"\"\"Builder class to pack widgets in a window or a frame.\"\"\"\n\n    parent: TParent\n    __kwargs: Mapping[str, Any]\n\n    def __init__(self, parent: TParent, **kwargs) -&gt; None:\n        \"\"\"\n        Initialize a packer object.\n\n        Args:\n            parent: parent widget\n            kwargs: common parameters to configure the widgets placement with `.pack()` method.\n\n        \"\"\"\n        self.parent = parent\n        self.__kwargs = kwargs\n\n    def pack_all(self, *args: tk.Widget, **kwargs) -&gt; None:\n        \"\"\"\n        Pack all widgets in a window or a frame.\n\n        Args:\n            args: widgets to pack\n            kwargs: all additional parameters to configure the widgets placement with `.pack()` method.\n\n        \"\"\"\n        kwargs.update(self.__kwargs)\n        for item in args:\n            item.pack(**kwargs)\n\n    def pack(self, widget: tk.Widget, **kwargs) -&gt; Self:\n        \"\"\"\n        Pack a widget in a window or a frame.\n\n        Args:\n            widget: widget to pack\n            kwargs: all additional parameters to configure the widget's position.\n\n        \"\"\"\n        kwargs.update(self.__kwargs)\n        widget.pack(**kwargs)\n        return self\n\n    def pack_left(self, widget: tk.Widget, **kwargs) -&gt; Self:\n        \"\"\"\n        Pack a widget in a window or a frame to the left.\n\n        Args:\n            widget: widget to pack\n            kwargs: all additional parameters to configure the widget's position.\n\n        \"\"\"\n        kwargs.update(self.__kwargs)\n        widget.pack(side=tk.LEFT, **kwargs)\n        return self\n\n    def pack_right(self, widget: tk.Widget, **kwargs) -&gt; Self:\n        \"\"\"\n        Pack a widget in a window or a frame to the right.\n\n        Args:\n            widget: widget to pack\n            kwargs: all additional parameters to configure the widget's position.\n\n        \"\"\"\n        kwargs.update(self.__kwargs)\n        widget.pack(side=tk.RIGHT, **kwargs)\n        return self\n\n    def pack_top(self, widget: tk.Widget, **kwargs) -&gt; Self:\n        \"\"\"\n        Pack a widget in a window or a frame to the top.\n\n        Args:\n            widget: widget to pack\n            kwargs: all additional parameters to configure the widget's position.\n\n        \"\"\"\n        kwargs.update(self.__kwargs)\n        widget.pack(side=tk.TOP, **kwargs)\n        return self\n\n    def pack_bottom(self, widget: tk.Widget, **kwargs) -&gt; Self:\n        \"\"\"\n        Pack a widget in a window or a frame to the bottom.\n\n        Args:\n            widget: widget to pack\n            kwargs: all additional parameters to configure the widget's position.\n\n        \"\"\"\n        kwargs.update(self.__kwargs)\n        widget.pack(side=tk.BOTTOM, **kwargs)\n        return self\n\n    def pack_expanded(self, widget: tk.Widget, **kwargs) -&gt; Self:\n        \"\"\"\n        Pack a widget in a window or a frame expanded.\n\n        Args:\n            widget: widget to pack\n            kwargs: all additional parameters to configure the widget's position.\n\n        \"\"\"\n        pack_expanded(widget, **self.__kwargs, **kwargs)\n        return self\n</code></pre>"},{"location":"internal_api_pack_helper.html#tkinter_layout_helpers.pack_helper.Packer.__init__","title":"<code>__init__(parent, **kwargs)</code>","text":"<p>Initialize a packer object.</p> <p>Parameters:</p> Name Type Description Default <code>parent</code> <code>TParent</code> <p>parent widget</p> required <code>kwargs</code> <p>common parameters to configure the widgets placement with <code>.pack()</code> method.</p> <code>{}</code> Source code in <code>tkinter_layout_helpers/pack_helper.py</code> <pre><code>def __init__(self, parent: TParent, **kwargs) -&gt; None:\n    \"\"\"\n    Initialize a packer object.\n\n    Args:\n        parent: parent widget\n        kwargs: common parameters to configure the widgets placement with `.pack()` method.\n\n    \"\"\"\n    self.parent = parent\n    self.__kwargs = kwargs\n</code></pre>"},{"location":"internal_api_pack_helper.html#tkinter_layout_helpers.pack_helper.Packer.pack","title":"<code>pack(widget, **kwargs)</code>","text":"<p>Pack a widget in a window or a frame.</p> <p>Parameters:</p> Name Type Description Default <code>widget</code> <code>Widget</code> <p>widget to pack</p> required <code>kwargs</code> <p>all additional parameters to configure the widget's position.</p> <code>{}</code> Source code in <code>tkinter_layout_helpers/pack_helper.py</code> <pre><code>def pack(self, widget: tk.Widget, **kwargs) -&gt; Self:\n    \"\"\"\n    Pack a widget in a window or a frame.\n\n    Args:\n        widget: widget to pack\n        kwargs: all additional parameters to configure the widget's position.\n\n    \"\"\"\n    kwargs.update(self.__kwargs)\n    widget.pack(**kwargs)\n    return self\n</code></pre>"},{"location":"internal_api_pack_helper.html#tkinter_layout_helpers.pack_helper.Packer.pack_all","title":"<code>pack_all(*args, **kwargs)</code>","text":"<p>Pack all widgets in a window or a frame.</p> <p>Parameters:</p> Name Type Description Default <code>args</code> <code>Widget</code> <p>widgets to pack</p> <code>()</code> <code>kwargs</code> <p>all additional parameters to configure the widgets placement with <code>.pack()</code> method.</p> <code>{}</code> Source code in <code>tkinter_layout_helpers/pack_helper.py</code> <pre><code>def pack_all(self, *args: tk.Widget, **kwargs) -&gt; None:\n    \"\"\"\n    Pack all widgets in a window or a frame.\n\n    Args:\n        args: widgets to pack\n        kwargs: all additional parameters to configure the widgets placement with `.pack()` method.\n\n    \"\"\"\n    kwargs.update(self.__kwargs)\n    for item in args:\n        item.pack(**kwargs)\n</code></pre>"},{"location":"internal_api_pack_helper.html#tkinter_layout_helpers.pack_helper.Packer.pack_bottom","title":"<code>pack_bottom(widget, **kwargs)</code>","text":"<p>Pack a widget in a window or a frame to the bottom.</p> <p>Parameters:</p> Name Type Description Default <code>widget</code> <code>Widget</code> <p>widget to pack</p> required <code>kwargs</code> <p>all additional parameters to configure the widget's position.</p> <code>{}</code> Source code in <code>tkinter_layout_helpers/pack_helper.py</code> <pre><code>def pack_bottom(self, widget: tk.Widget, **kwargs) -&gt; Self:\n    \"\"\"\n    Pack a widget in a window or a frame to the bottom.\n\n    Args:\n        widget: widget to pack\n        kwargs: all additional parameters to configure the widget's position.\n\n    \"\"\"\n    kwargs.update(self.__kwargs)\n    widget.pack(side=tk.BOTTOM, **kwargs)\n    return self\n</code></pre>"},{"location":"internal_api_pack_helper.html#tkinter_layout_helpers.pack_helper.Packer.pack_expanded","title":"<code>pack_expanded(widget, **kwargs)</code>","text":"<p>Pack a widget in a window or a frame expanded.</p> <p>Parameters:</p> Name Type Description Default <code>widget</code> <code>Widget</code> <p>widget to pack</p> required <code>kwargs</code> <p>all additional parameters to configure the widget's position.</p> <code>{}</code> Source code in <code>tkinter_layout_helpers/pack_helper.py</code> <pre><code>def pack_expanded(self, widget: tk.Widget, **kwargs) -&gt; Self:\n    \"\"\"\n    Pack a widget in a window or a frame expanded.\n\n    Args:\n        widget: widget to pack\n        kwargs: all additional parameters to configure the widget's position.\n\n    \"\"\"\n    pack_expanded(widget, **self.__kwargs, **kwargs)\n    return self\n</code></pre>"},{"location":"internal_api_pack_helper.html#tkinter_layout_helpers.pack_helper.Packer.pack_left","title":"<code>pack_left(widget, **kwargs)</code>","text":"<p>Pack a widget in a window or a frame to the left.</p> <p>Parameters:</p> Name Type Description Default <code>widget</code> <code>Widget</code> <p>widget to pack</p> required <code>kwargs</code> <p>all additional parameters to configure the widget's position.</p> <code>{}</code> Source code in <code>tkinter_layout_helpers/pack_helper.py</code> <pre><code>def pack_left(self, widget: tk.Widget, **kwargs) -&gt; Self:\n    \"\"\"\n    Pack a widget in a window or a frame to the left.\n\n    Args:\n        widget: widget to pack\n        kwargs: all additional parameters to configure the widget's position.\n\n    \"\"\"\n    kwargs.update(self.__kwargs)\n    widget.pack(side=tk.LEFT, **kwargs)\n    return self\n</code></pre>"},{"location":"internal_api_pack_helper.html#tkinter_layout_helpers.pack_helper.Packer.pack_right","title":"<code>pack_right(widget, **kwargs)</code>","text":"<p>Pack a widget in a window or a frame to the right.</p> <p>Parameters:</p> Name Type Description Default <code>widget</code> <code>Widget</code> <p>widget to pack</p> required <code>kwargs</code> <p>all additional parameters to configure the widget's position.</p> <code>{}</code> Source code in <code>tkinter_layout_helpers/pack_helper.py</code> <pre><code>def pack_right(self, widget: tk.Widget, **kwargs) -&gt; Self:\n    \"\"\"\n    Pack a widget in a window or a frame to the right.\n\n    Args:\n        widget: widget to pack\n        kwargs: all additional parameters to configure the widget's position.\n\n    \"\"\"\n    kwargs.update(self.__kwargs)\n    widget.pack(side=tk.RIGHT, **kwargs)\n    return self\n</code></pre>"},{"location":"internal_api_pack_helper.html#tkinter_layout_helpers.pack_helper.Packer.pack_top","title":"<code>pack_top(widget, **kwargs)</code>","text":"<p>Pack a widget in a window or a frame to the top.</p> <p>Parameters:</p> Name Type Description Default <code>widget</code> <code>Widget</code> <p>widget to pack</p> required <code>kwargs</code> <p>all additional parameters to configure the widget's position.</p> <code>{}</code> Source code in <code>tkinter_layout_helpers/pack_helper.py</code> <pre><code>def pack_top(self, widget: tk.Widget, **kwargs) -&gt; Self:\n    \"\"\"\n    Pack a widget in a window or a frame to the top.\n\n    Args:\n        widget: widget to pack\n        kwargs: all additional parameters to configure the widget's position.\n\n    \"\"\"\n    kwargs.update(self.__kwargs)\n    widget.pack(side=tk.TOP, **kwargs)\n    return self\n</code></pre>"},{"location":"internal_api_pack_helper.html#tkinter_layout_helpers.pack_helper.pack_expanded","title":"<code>pack_expanded(widget, **kwargs)</code>","text":"<p>Pack a widget in a parent widget expanded.</p> <p>Parameters:</p> Name Type Description Default <code>widget</code> <code>Widget</code> <p>widget to pack</p> required <code>kwargs</code> <p>all additional parameters to configure the widget's position in the cell</p> <code>{}</code> Source code in <code>tkinter_layout_helpers/pack_helper.py</code> <pre><code>def pack_expanded(widget: tk.Widget, **kwargs) -&gt; None:\n    \"\"\"\n    Pack a widget in a parent widget expanded.\n\n    Args:\n        widget: widget to pack\n        kwargs: all additional parameters to configure the widget's position in the cell\n\n    \"\"\"\n    kwargs.update(dict(fill=tk.BOTH, expand=True))\n    widget.pack(**kwargs)\n</code></pre>"},{"location":"internal_api_pack_helper.html#tkinter_layout_helpers.pack_helper.pack_manager","title":"<code>pack_manager(parent, **kwargs)</code>","text":"<p>A context manager to help to place widgets in window or a frame using <code>.pack()</code> method.</p> <p>Basicly, it is a wrapper around <code>Packer</code> class, but additionaly, it sets the parent widget of a grid (within the <code>with</code> statement scope), so you don't need to specify it explicitly for every widget.</p> <p>Usage example:</p> <pre><code>with pack_manager(root, fill=tk.BOTH, relief=tk.RAISED) as packer:\n    packer.pack_left(tk.Label(text=\"Left bar\"))\n    packer.pack_top(tk.Label(text=\"Top bar\"))\n    packer.pack_bottom(tk.Label(text=\"Bottom bar\"))\n    packer.pack_right(tk.Label(text=\"Right bar\"))\n    packer.pack_expanded(tk.Text())\n</code></pre> Source code in <code>tkinter_layout_helpers/pack_helper.py</code> <pre><code>@contextlib.contextmanager\ndef pack_manager(parent: TParent, **kwargs) -&gt; Generator[Packer, None, None]:\n    \"\"\"\n    A context manager to help to place widgets in window or a frame using `.pack()` method.\n\n    Basicly, it is a wrapper around `Packer` class, but additionaly, it sets the parent widget of a grid\n    (within the `with` statement scope), so you don't need to specify it explicitly for every widget.\n\n    Usage example:\n\n    ```python\n    with pack_manager(root, fill=tk.BOTH, relief=tk.RAISED) as packer:\n        packer.pack_left(tk.Label(text=\"Left bar\"))\n        packer.pack_top(tk.Label(text=\"Top bar\"))\n        packer.pack_bottom(tk.Label(text=\"Bottom bar\"))\n        packer.pack_right(tk.Label(text=\"Right bar\"))\n        packer.pack_expanded(tk.Text())\n    ```\n    \"\"\"\n    with set_parent(parent):\n        packer = Packer(parent, **kwargs)\n        yield packer\n</code></pre>"},{"location":"internal_api_parent_manager.html","title":"Parent Manager","text":""},{"location":"internal_api_parent_manager.html#tkinter_layout_helpers.parent_manager.set_parent","title":"<code>set_parent(parent)</code>","text":"<p>Set the parent widget for all widgets created within the <code>with</code> statement scope, so you will not have to pass the parent for every created widget.</p> <p>Parameters:</p> Name Type Description Default <code>parent</code> <code>TParent</code> <p>parent widget</p> required Source code in <code>tkinter_layout_helpers/parent_manager.py</code> <pre><code>@contextlib.contextmanager\ndef set_parent(parent: TParent) -&gt; Generator[TParent, None, None]:\n    \"\"\"\n    Set the parent widget for all widgets created within the `with` statement scope,\n    so you will not have to pass the parent for every created widget.\n\n    Args:\n        parent: parent widget\n\n    \"\"\"\n    old_root = _default_root_wrapper.default_root\n    _default_root_wrapper.default_root = parent\n    try:\n        yield parent\n    finally:\n        _default_root_wrapper.default_root = old_root\n</code></pre>"},{"location":"public_api.html","title":"Public API","text":""},{"location":"public_api.html#tkinter_layout_helpers.grid_manager","title":"<code>grid_manager(parent, **kwargs)</code>","text":"<p>A context manager to create a grid of widgets. It is intended to simplify a placement of widgets with <code>.grid()</code>.</p> <p>Basicly, it is a wrapper around <code>Grid</code> class, but additionaly, it sets the parent widget of a grid (within the <code>with</code> statement scope), so you don't need to specify it explicitly for every widget.</p> <p>Usage example:</p> <pre><code>with grid_manager(root, sticky=tk.EW) as grid:\n    with grid.new_row() as row:\n        row.add(tk.Label(text=\"0\", width=20))\n        row.add(tk.Label(text=\"1\", width=20))\n        row.add(tk.Label(text=\"2\", width=20))\n        row.add(tk.Label(text=\"3\", width=20))\n        row.add(tk.Label(text=\"4\", width=20))\n</code></pre> Source code in <code>tkinter_layout_helpers/grid_helper.py</code> <pre><code>@contextlib.contextmanager\ndef grid_manager(parent: TParent, **kwargs) -&gt; Generator[Grid, None, None]:\n    \"\"\"\n    A context manager to create a grid of widgets. It is intended to simplify a placement of widgets with `.grid()`.\n\n    Basicly, it is a wrapper around `Grid` class, but additionaly, it sets the parent widget of a grid\n    (within the `with` statement scope), so you don't need to specify it explicitly for every widget.\n\n    Usage example:\n\n    ```python\n    with grid_manager(root, sticky=tk.EW) as grid:\n        with grid.new_row() as row:\n            row.add(tk.Label(text=\"0\", width=20))\n            row.add(tk.Label(text=\"1\", width=20))\n            row.add(tk.Label(text=\"2\", width=20))\n            row.add(tk.Label(text=\"3\", width=20))\n            row.add(tk.Label(text=\"4\", width=20))\n    ```\n    \"\"\"\n    with set_parent(parent):\n        grid = Grid(parent, **kwargs)\n        yield grid\n        grid.build()\n</code></pre>"},{"location":"public_api.html#tkinter_layout_helpers.pack_expanded","title":"<code>pack_expanded(widget, **kwargs)</code>","text":"<p>Pack a widget in a parent widget expanded.</p> <p>Parameters:</p> Name Type Description Default <code>widget</code> <code>Widget</code> <p>widget to pack</p> required <code>kwargs</code> <p>all additional parameters to configure the widget's position in the cell</p> <code>{}</code> Source code in <code>tkinter_layout_helpers/pack_helper.py</code> <pre><code>def pack_expanded(widget: tk.Widget, **kwargs) -&gt; None:\n    \"\"\"\n    Pack a widget in a parent widget expanded.\n\n    Args:\n        widget: widget to pack\n        kwargs: all additional parameters to configure the widget's position in the cell\n\n    \"\"\"\n    kwargs.update(dict(fill=tk.BOTH, expand=True))\n    widget.pack(**kwargs)\n</code></pre>"},{"location":"public_api.html#tkinter_layout_helpers.pack_manager","title":"<code>pack_manager(parent, **kwargs)</code>","text":"<p>A context manager to help to place widgets in window or a frame using <code>.pack()</code> method.</p> <p>Basicly, it is a wrapper around <code>Packer</code> class, but additionaly, it sets the parent widget of a grid (within the <code>with</code> statement scope), so you don't need to specify it explicitly for every widget.</p> <p>Usage example:</p> <pre><code>with pack_manager(root, fill=tk.BOTH, relief=tk.RAISED) as packer:\n    packer.pack_left(tk.Label(text=\"Left bar\"))\n    packer.pack_top(tk.Label(text=\"Top bar\"))\n    packer.pack_bottom(tk.Label(text=\"Bottom bar\"))\n    packer.pack_right(tk.Label(text=\"Right bar\"))\n    packer.pack_expanded(tk.Text())\n</code></pre> Source code in <code>tkinter_layout_helpers/pack_helper.py</code> <pre><code>@contextlib.contextmanager\ndef pack_manager(parent: TParent, **kwargs) -&gt; Generator[Packer, None, None]:\n    \"\"\"\n    A context manager to help to place widgets in window or a frame using `.pack()` method.\n\n    Basicly, it is a wrapper around `Packer` class, but additionaly, it sets the parent widget of a grid\n    (within the `with` statement scope), so you don't need to specify it explicitly for every widget.\n\n    Usage example:\n\n    ```python\n    with pack_manager(root, fill=tk.BOTH, relief=tk.RAISED) as packer:\n        packer.pack_left(tk.Label(text=\"Left bar\"))\n        packer.pack_top(tk.Label(text=\"Top bar\"))\n        packer.pack_bottom(tk.Label(text=\"Bottom bar\"))\n        packer.pack_right(tk.Label(text=\"Right bar\"))\n        packer.pack_expanded(tk.Text())\n    ```\n    \"\"\"\n    with set_parent(parent):\n        packer = Packer(parent, **kwargs)\n        yield packer\n</code></pre>"},{"location":"public_api.html#tkinter_layout_helpers.set_parent","title":"<code>set_parent(parent)</code>","text":"<p>Set the parent widget for all widgets created within the <code>with</code> statement scope, so you will not have to pass the parent for every created widget.</p> <p>Parameters:</p> Name Type Description Default <code>parent</code> <code>TParent</code> <p>parent widget</p> required Source code in <code>tkinter_layout_helpers/parent_manager.py</code> <pre><code>@contextlib.contextmanager\ndef set_parent(parent: TParent) -&gt; Generator[TParent, None, None]:\n    \"\"\"\n    Set the parent widget for all widgets created within the `with` statement scope,\n    so you will not have to pass the parent for every created widget.\n\n    Args:\n        parent: parent widget\n\n    \"\"\"\n    old_root = _default_root_wrapper.default_root\n    _default_root_wrapper.default_root = parent\n    try:\n        yield parent\n    finally:\n        _default_root_wrapper.default_root = old_root\n</code></pre>"}]}